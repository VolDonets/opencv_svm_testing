cmake_minimum_required(VERSION 3.17)
project(opencv_svm_testing)

set(CMAKE_CXX_STANDARD 20)

add_executable(my_train ocv_svm_hog_train.cpp)
add_executable(my_detector ocv_svm_hog_detector.cpp)
add_executable(ocv_svm_hog_train_and_detector train_HOG.cpp)
add_executable(dlib_detector fhog_object_detector_ex.cpp)
add_executable(dlib_from_python fhog_load_python_svm_model.cpp)

target_link_libraries(my_train seasocks "${ZLIB_LIBRARIES}")
target_link_libraries(my_train pthread z)
target_link_libraries(my_detector seasocks "${ZLIB_LIBRARIES}")
target_link_libraries(my_detector pthread z)

find_package(OpenCV REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})
target_link_libraries(my_train ${OpenCV_LIBS})
target_link_libraries(my_detector ${OpenCV_LIBS})
target_link_libraries(ocv_svm_hog_train_and_detector ${OpenCV_LIBS})
target_link_libraries(dlib_from_python ${OpenCV_LIBS})

target_link_libraries(dlib_detector /lib/x86_64-linux-gnu/libgsl.so.23)
target_link_libraries(dlib_detector /lib/x86_64-linux-gnu/libgslcblas.so.0)
target_link_libraries(dlib_detector /lib/x86_64-linux-gnu/liblapack.so)

target_link_libraries(dlib_from_python /lib/x86_64-linux-gnu/libgsl.so.23)
target_link_libraries(dlib_from_python /lib/x86_64-linux-gnu/libgslcblas.so.0)
target_link_libraries(dlib_from_python /lib/x86_64-linux-gnu/liblapack.so)

find_package(PkgConfig)
if (PKG_CONFIG_FOUND)
    pkg_check_modules(DLIB "dlib-1")
    if (DLIB_FOUND)
        target_link_libraries(my_train ${DLIB_LIBRARIES})
        target_link_libraries(my_detector ${DLIB_LIBRARIES})
        target_link_libraries(dlib_detector ${DLIB_LIBRARIES})
        target_link_libraries(dlib_from_python ${DLIB_LIBRARIES})
        add_definitions(${DLIB_CFLAGS} ${DLIB_CFLAGS_OTHER})
    endif()
endif()

find_package(PkgConfig)
if (PKG_CONFIG_FOUND)
    pkg_check_modules(GLIB "glib-2.0")
    if (GLIB_FOUND)
        target_link_libraries(my_train ${GLIB_LIBRARIES})
        target_link_libraries(my_detector ${GLIB_LIBRARIES})
        add_definitions(${GLIB_CFLAGS} ${GLIB_CFLAGS_OTHER})
    endif()
endif()

find_package(PkgConfig)
if (PKG_CONFIG_FOUND)
    pkg_check_modules(GST "gstreamer-1.0")
    if (GST_FOUND)
        target_link_libraries(my_train ${GST_LIBRARIES})
        target_link_libraries(my_detector ${GST_LIBRARIES})
        add_definitions(${GST_CFLAGS} ${GST_CFLAGS_OTHER})
    endif()
endif()

find_package(PkgConfig)
if (PKG_CONFIG_FOUND)
    pkg_check_modules(SPD "gstreamer-sdp-1.0")
    if (SPD_FOUND)
        target_link_libraries(my_train ${SPD_LIBRARIES})
        add_definitions(${SPD_CFLAGS} ${SPD_CFLAGS_OTHER})
    endif()
endif()

find_package(PkgConfig)
if (PKG_CONFIG_FOUND)
    pkg_check_modules(WEBRTC "gstreamer-webrtc-1.0")
    if (WEBRTC_FOUND)
        target_link_libraries(my_train ${WEBRTC_LIBRARIES})
        target_link_libraries(my_detector ${WEBRTC_LIBRARIES})
        add_definitions(${WEBRTC_CFLAGS} ${WEBRTC_CFLAGS_OTHER})
    endif()
endif()

find_package(PkgConfig)
if (PKG_CONFIG_FOUND)
    pkg_check_modules(JSON "json-glib-1.0")
    if (JSON_FOUND)
        target_link_libraries(my_train ${JSON_LIBRARIES})
        target_link_libraries(my_detector ${JSON_LIBRARIES})
        add_definitions(${JSON_CFLAGS} ${JSON_CFLAGS_OTHER})
    endif()
endif()

find_package(PkgConfig)
if (PKG_CONFIG_FOUND)
    pkg_check_modules(SOUP "libsoup-2.4")
    if (SOUP_FOUND)
        target_link_libraries(my_train ${SOUP_LIBRARIES})
        target_link_libraries(my_detector ${SOUP_LIBRARIES})
        add_definitions(${SOUP_CFLAGS} ${SOUP_CFLAGS_OTHER})
    endif()
endif()

add_custom_command(TARGET my_train POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${PROJECT_SOURCE_DIR}/src $<TARGET_FILE_DIR:my_train>/src)